openapi: 3.1.0

info:
  title: Remind - API 
  description: |-
    Documentação da API para a aplicação App Remind.  

    Links úteis:
    - [Remind App repository](https://github.com/ICEI-PUC-Minas-PMV-ADS/pmv-ads-2024-1-e4-proj-infra-t4-g5-remind.git)
    - [Swagger Termos de Serviço](http://swagger.io/terms/)

  contact: 
    email: teste@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0

servers:
  - url: http://localhost:3000/api-docs

security:
  - api_key: []
  - bearerAuth: []

tags:
  - name: User
    description: Operações relacionadas aos usuários.
  - name: Notes
    description: Operações relacionadas às Notas de mensagem aos usuários.

paths:
  /users/criar:
    post:
      tags:
        - User
      summary: Cria um novo usuário
      description: Cria um novo usuário com os dados fornecidos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        '400':
          description: Usuario já existe.
      security:
        - api_key: []
        - bearerAuth: []

  /users/login:
    post:
      tags:
        - User
      summary: Faz login com um usuário existente
      description: Faz login com as credenciais de um usuário existente.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
      responses:
        '200':
          description: Login bem-sucedido. Retorna informações do usuário e token de acesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginOutput'
        '400':
          description: Credenciais inválidas.
      security:
        - api_key: []

  /users/update/{id}:
    put:
      tags:
        - User
      summary: Atualiza um usuário existente
      description: Atualiza os detalhes de um usuário existente com base no ID fornecido.
      parameters:
        - in: path
          name: id
          description: ID do usuário a ser atualizado
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateInput'
      responses:
        '200':
          description: Usuário atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        '400':
          description: Erro ao atualizar usuário. 
        '404':
          description: Usuário não encontrado.
      security:
        - api_key: []
        - bearerAuth: []

  /users/get:
    get:
      tags:
        - User
      summary: Obtém todos os usuários
      description: Retorna uma lista de todos os usuários cadastrados.
      responses:
        '200':
          description: Lista de usuários recuperada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserOutput'
        '500':
          description: Erro interno do servidor ao buscar todos os usuários.
      security:
        - api_key: []
        - bearerAuth: []

  /users/get/{id}:
    get:
      tags:
        - User
      summary: Obtém um usuário pelo ID
      description: Retorna um usuário com base no ID fornecido.
      parameters:
        - in: path
          name: id
          description: ID do usuário a ser obtido
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        '404':
          description: Usuário não encontrado.
        '500':
          description: Erro interno do servidor ao buscar o usuário por ID.
      security:
        - api_key: []
        - bearerAuth: []

  /users/delete/{id}:
    delete:
      tags:
        - User
      summary: Exclui um usuário pelo ID
      description: Exclui um usuário com base no ID fornecido.
      parameters:
        - in: path
          name: id
          description: ID do usuário a ser excluído
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usuário excluído com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutput'
        '400':
          description: Erro ao excluir usuário.
        '404':
          description: Usuário não encontrado.
        '500':
          description: Erro interno do servidor ao excluir o usuário por ID.
      security:
        - api_key: []
        - bearerAuth: []
    /notes/criar:
    post:
      tags:
        - Notes
      summary: Cria uma nova nota
      description: Cria uma nova nota com os dados fornecidos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteInput'
      responses:
        '201':
          description: Nota criada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteOutput'
        '500':
          description: Erro ao criar nota.
      security:
        - api_key: []
        - bearerAuth: []

  /notes/update/{id}:
    put:
      tags:
        - Notes
      summary: Atualiza uma nota existente
      description: Atualiza os detalhes de uma nota existente com base no ID fornecido.
      parameters:
        - in: path
          name: id
          description: ID da nota a ser atualizada
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteInput'
      responses:
        '200':
          description: Nota atualizada com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteOutput'
        '400':
          description: Erro ao atualizar nota.
        '404':
          description: Nota não encontrada.
      security:
        - api_key: []
        - bearerAuth: []

  /notes/get/criador:
    get:
      tags:
        - Notes
      summary: Obtém todas as notas criadas pelo usuário
      description: Retorna uma lista de todas as notas criadas pelo usuário autenticado.
      responses:
        '200':
          description: Lista de notas do criador recuperada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteOutput'
        '500':
          description: Erro interno do servidor ao buscar todas as notas do criador.
      security:
        - api_key: []
        - bearerAuth: []

  /notes/get/destinatario:
    get:
      tags:
        - Notes
      summary: Obtém todas as notas destinadas ao usuário
      description: Retorna uma lista de todas as notas destinadas ao usuário autenticado.
      responses:
        '200':
          description: Lista de notas do destinatário recuperada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NoteOutput'
        '500':
          description: Erro interno do servidor ao buscar todas as notas do destinatário.
      security:
        - api_key: []
        - bearerAuth: []

  /notes/delete/{id}:
    delete:
      tags:
        - Notes
      summary: Exclui uma nota pelo ID
      description: Exclui uma nota com base no ID fornecido.
      parameters:
        - in: path
          name: id
          description: ID da nota a ser excluída
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Nota excluída com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NoteOutput'
        '400':
          description: Erro ao excluir nota.
        '404':
          description: Nota não encontrada.
        '500':
          description: Erro interno do servidor ao excluir a nota por ID.
      security:
        - api_key: []
        - bearerAuth: []


components:
  schemas:
    UserInput:
      type: object
      properties:
        nome:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao@example.com
        senha:
          type: string
          example: SenhaSegura123
        cargo:
          type: string
          example: Gerente de Vendas
        setor:
          type: string
          example: Vendas
        permissao:
          type: integer
          example: 1
      required:
        - nome
        - email
        - senha
        - cargo
        - setor
        - permissao

    UserOutput:
      type: object
      properties:
        _id:
          type: string
          example: 1234567890abcdef
        nome:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao@example.com
        cargo:
          type: string
          example: Gerente de Vendas
        setor:
          type: string
          example: Vendas
        permissao:
          type: integer
          example: 1

    UserUpdateInput:
      type: object
      properties:
        nome:
          type: string
          example: João Silva
        email:
          type: string
          format: email
          example: joao@example.com
        cargo:
          type: string
          example: Gerente de Vendas
        setor:
          type: string
          example: Vendas
        permissao:
          type: integer
          example: 1

    NoteInput:
      type: object
      properties:
        titulo:
          type: string
          example: Título da nota
        descricao:
          type: string
          example: Descrição da nota
        destinatario:
          type: string
          example: ID do destinatário da nota
        datafinal:
          type: string
          format: date
          example: 2024-03-30
        situacao:
          type: string
          example: Pendente
      required:
        - titulo
        - descricao
        - destinatario
        - datafinal
        - situacao

    NoteOutput:
      type: object
      properties:
        _id:
          type: string
          example: 1234567890abcdef
        titulo:
          type: string
          example: Título da nota
        descricao:
          type: string
          example: Descrição da nota
        criador:
          type: string
          example: ID do criador da nota
        destinatario:
          type: string
          example: ID do destinatário da nota
        datafinal:
          type: string
          format: date
          example: 2024-03-30
        situacao:
          type: string
          example: Pendente

  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: Authorization
      description: Chave de API (ex: `Bearer <api_key>`)
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT


